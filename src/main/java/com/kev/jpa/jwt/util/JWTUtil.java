package com.kev.jpa.jwt.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;



/**
 * Class that helps us create new jwt and validate them
 */
@Service
public class JWTUtil {
    private final String SECRET_KEY = "com.kev.jpa.jwt.secret.key";

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    /**
     * Return all the claims inside the token
     *
     * @param token generated by JWT and passed in the request header
     * @return a map with al the user data
     */
    public Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
    }

    /**
     * Function that extract the email from the token passed in the authentication request header
     *
     * @param token generated by JWT and passed in the request header
     * @return email extracted from the token
     */
    public String extractEmail(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    /**
     * Extract the expiration date from the token
     *
     * @param token generated by JWT and passed in the request header
     * @return a Date instance that represent the expiration date
     */
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }


    /***
     *  Create a new token with the information provided
     * @param claims claims that represent the user's roles
     * @param subject user email
     * @return a new jwt that contains the information provided
     */
    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 8))
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY).compact();
    }

    /**
     * Generate a new token with the user detail information
     * @param userDetails user details that contains the user data (subject, claims)
     * @return the new token generated
     */
    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        List<String> claims_string = userDetails.getAuthorities()
                .stream()
                .map(GrantedAuthority::getAuthority)
                .toList();
        claims.put("ROLES", claims_string);
        return createToken(claims, userDetails.getUsername());
    }

    /**
     * Check if the token has not yet expired
     * @param token token generated by JWT and passed in the request header
     * @return true if the token is not expired
     */
    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    /**
     * Validate if the token is valid.
     * Is valid if the date has not expired yet and the user's email matches that of the token
     * @param token token generated by JWT and passed in the request header
     * @param userDetails user details that contains the user data (subject, claims)
     * @return true if thee token is valid
     */
    public Boolean validateToken(String token, UserDetails userDetails) {
        final String email = extractEmail(token);
        return (email.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }
}
